1. Retrieve the names and emails of all customers.
Select Name , Email From Customers;

2. List all products along with their categories and prices.
Select Name, Category, Price 
From Products;

3. Find the total number of products available in the 'Electronics' category.
Select count(*) as count_of_products
From Products
Where Category = 'Electronics';


4. Display all orders placed by customers from the 'United States.'
Select Orders.OrderID, Orders.OrderDate,Orders.TotalAmount, Customers.CustomerID, Customers.Name
From Orders 
Join Customers 
ON 
Orders.CustomerID = Customers.CustomerID
Where Country = 'United States';

5. Calculate the total revenue generated from all orders.
Select Sum(TotalAmount) as Revenue
From Orders;

6. Find the name of the customer who placed the order with the highest total amount.
Select Customers.CustomerID, Customers.Name , Orders.OrderID,Orders.OrderDate , Orders.TotalAmount
From Customers
Join Orders On 
Customers.CustomerID = Orders.CustomerID
Order by TotalAmount DESC
Limit 1;

7. Retrieve all products that have less than 50 units in stock.
Select ProductID,Name  From Products Where Stock < 50;

8. List all reviews with ratings of 4 or higher.
Select * from Reviews
Where Rating >= 4;

9. Write a query to display all orders along with the customer name and email.
Select Orders.OrderID, Orders.OrderDate, Orders.TotalAmount ,Customers.CustomerID, Customers.Name, Customers.Email 
from Orders Join Customers On  Orders.CustomerID = Customers.CustomerID;


10. List all reviews along with the product name and customer name.
Select Reviews.ReviewID, Reviews.Rating, Reviews.ReviewText, Reviews.ReviewDate 
, Products.Name as Product_name,
Customers.Name as Customers_name
From Reviews 
Join Products on Reviews.ProductID = Products.ProductID
Join Customers on Reviews.CustomerID = Customers.CustomerID;


11. Calculate the average rating for each product.
Select Products.ProductID,Products.Name AS Product_name ,  Avg(Rating) as Average_rating_per_product
From Reviews Join Products On  Reviews.ProductID = Products.ProductID Group by Products.ProductId, Products.Name;


12. Find the total revenue generated by each product category.
SELECT Products.Category, SUM(OrderItems.Quantity * Products.Price) AS Revenue
FROM Products 
JOIN OrderItems ON Products.ProductID = OrderItems.ProductID
GROUP BY Products.Category;



13. Determine the country with the highest number of customers.
Select Country, Count(*) as total_count From Customers Group by Country Order by  Count(*) DESC  LIMIT 1;

14. Retrieve all orders placed after March 1, 2023.
Select * from Orders
Where OrderDate > '2023-03-01';


15. Display all shipments that are still 'In Transit.'
Select * from Shipping
where Status = 'In Transit';

16. Identify the top-rated product based on average rating.
SELECT 
p.ProductID,
p.Name,
SUM(oi.Quantity * p.Price) AS TotalSales
FROM Products p
JOIN OrderItems oi ON p.ProductID = oi.ProductID
GROUP BY p.ProductID, p.Name
ORDER BY TotalSales DESC
LIMIT 1;


17. List all customers who have written at least one review.
SELECT DISTINCT Customers.CustomerID, Customers.Name
FROM Customers 
JOIN Reviews ON Customers.CustomerID = Customers.CustomerID;



18. Find all products that have been purchased but never reviewed.
SELECT p.ProductID, p.Name, SUM(oi.Quantity * p.Price) AS Sale_product
FROM Products p
JOIN OrderItems oi ON p.ProductID = oi.ProductID
LEFT JOIN Reviews r ON p.ProductID = r.ProductID
WHERE r.ProductID IS NULL
GROUP BY p.ProductID, p.Name;


19. Write a query to find the product with the highest total sales (quantity * price).
Select Products.ProductID, Products.Name,  Sum(OrderItems.Quantity * Products.Price) as Sale_product
 From Products Join OrderItems on  Products.ProductID = OrderItems.ProductID Group by Products.ProductID , Products.Name Order by Sale_product Desc Limit 1;


20. Retrieve all products that have not been purchased yet.
Select * From Products Where ProductID Not in (Select Distinct ProductID from OrderItems);